11/21/2016

File Redirection
     Changing the usual input/output behavior of a program

     Command line redirection
     
     	     >
		Redirects stdout to a file
		Overwrites the contents of the file
		<COMMAND> <FILE>
		ls > file_list

	     >>
 	        Redirects stdout to a file by appending

             2>
	        Redirects stderr to a file
		Overwrites the file (2>> appends);

	     &>
	        Redirect stdout and stderr

	     <
		redirects stdin from a file 

	     | (pipe)
	        Redirect stdout from one command to stdin of the next

		ls | wc 

     Redirection in c programs
     
             dup2 - <unistd.h>
	     	  Redirect one file descriptor to another
		  
             dup2 (fd1, fd2)
	     	  Redirects fd2 to fd1

		  You will lose any reference to the original
		  fd2, that file is closed.

             dup - <unistd.h>
	     	  Duplicates an existing entry in the file table.

		  Returns a new file descriptor for the duplicate
		  entry.

		  dup(fd)
			returns the new file descriptor

11/29/2016

Aim: Sharing is caring!

Do Now:
   Write a simple c program that creates a child process and have the parent
   wait for the child to exit.

   Create a primitive variable in the parent before forking, then modify that
   variable in the child and print it out in both the child and parent. 

Shared Memory - <sys/shm.h>, <sys/ipc.h>, <sys/types.h>
   A segment of heap memory that can be accessed by multiple processes.

   Shared memory is accessed via some key that is known by any process that needs
   to access it.

   Shared memory does not get released when a program exits. 

   5 Shared memory operations:
      Create the segment (happens once)
      Access the segment (happens once per process)
      Attach the segment to a variable (once per process)
      Deatch the segment from a variable (once per process)
      Remove the segment (happens once)

   shmget
      Create or access a shared memory segment
      Returns a shared memory descriptor (similar idea to a file descriptor), or -1 if it fails
      shmget( key,size, flags)
      Key - unique integer identifier for the shared memory segment (like a file name)
      Size - how much memory to request
      Flags
      Includes permissions for the segment
      Combine with bitwise or
        IPC_CREAT: create the segment
          If a segment is new, will set value to all 0s
          Fail if the segment already exists and IPC_CREAT is on
        IPC_EXCL: Fail if the segment already exists and IPC_CREAT is on


	Example:
	int sd;
	sd = shmget(24601, 1024, IPC_CREAT | 0664)


    shmat
      Attach a shared memory segment to a variable
      Returns a pointer to the segment or -1 (errno)
      shmat( descriptor, address, flags)
      Descriptor - the return value
      Address - if 0, the OS will provide the appropriate address
      Flags
      usually 0, there is one useful flag
      SHM_RDONLY: makes the memory read only


11/30/2016

Aim: Memes

More Shared Memory

     shmdt

	Detach a variable from a shared memory segment.

	Returns 0 upon success or -1 upon failure.

	shmdt( pointer )

	        pointer
	      		The Address used to access the segment

	example
		shmdt(p);
    
     shmctl

	Perform operations on the shared memory segment

	Each shared memory segment has metadata that can be stored in a struct
	(struct shmid_ds)

	Some of that data store: last access, size, pid of creator, pid of last modification


	shmctl( descriptor, command, buffer)

		descriptor
			Return value of shmget

		commands:
			IPC_RMID: Remove a shared memory segment

			IPC_STAT: populate the buffer (struct shmid_ds) with information

			IPC_SET: set some of the information for the segment to the info
				 in buffer

		example:
			struct shmid_ds d;
			shmctl(sd, IPC_RMID, &d)


	ftok - <sys/ipc.h>

	     Generate a key useful for IPC functions

	     ftok(path, x)

	     	path
			A path some file, the file must be accessible by the program.

		x
			An int used to generate the key

		The same path and x will always generate the same key


	sd = shmget ( ftok("dir/file", 12), 1024, IPC_CREAT | 0664)

12/5/2016

Aim: How do we flag down a resource?

Semaphores (created by Edsger Dijkstra)

	   IPC construct used to control access to shared resource (like a file or shared
	   memory).

	   Essentially, a sempahore is a counter that represents how many processes can access
	   a resource at any given time.

	     If a semaphore has a value of 3, then it can have 3 active "users".

	     If a semaphore has a value of 0, then it is unavailable.

	     Mutex - semaphore with a value of 1.

	   Most semaphore operations are "atomic", meaning they will not be split into multiple
	   processor instructions.

	   Semaphore operations:

	     Create a sempahore

             Set an initial value

	     Up(S) / V(s)

	     	   Release the semaphore to signal you are done with it's associated resource.

		   pseudocode:
			S++

	     Down(S) / P(S)
	     	   Attempt to take the semaphore.

		   If the semaphore is 0, wait for it to be available.

		   pseudocode:
			while (S == 0)
			      block
			S--

	     Remove a semaphore

	   Semaphores in C - <sys/types.h> <sys/ipc.h> <sys/sem.h>

	   	      semget

			Create/Get access to a semaphore.

			This is not the same as Up(s), it does not modify the semaphore

			Returns a sempahore descriptor or -1 (errno)

			semget( <KEY>, <AMOUNT>, <FLAGS> )

				KEY
					Unique semaphore identifier (use ftok)

				AMOUNT
					Semaphores are stored as sets with potentially many semaphores
					together. This parameter sets the number of semaphores to
					create/get.

				FLAGS
					Includes permissions for the semaphore.

					Combine with bitwise or

					IPC_CREAT: create the semaphore and set value to 0.

					IPC_EXCL: Fail if the semaphore already exists and
						  IPC_CREAT is on.

					
